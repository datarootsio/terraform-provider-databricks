// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterState cluster state
// swagger:model ClusterState
type ClusterState string

const (

	// ClusterStatePENDING captures enum value "PENDING"
	ClusterStatePENDING ClusterState = "PENDING"

	// ClusterStateRUNNING captures enum value "RUNNING"
	ClusterStateRUNNING ClusterState = "RUNNING"

	// ClusterStateRESTARTING captures enum value "RESTARTING"
	ClusterStateRESTARTING ClusterState = "RESTARTING"

	// ClusterStateRESIZING captures enum value "RESIZING"
	ClusterStateRESIZING ClusterState = "RESIZING"

	// ClusterStateTERMINATING captures enum value "TERMINATING"
	ClusterStateTERMINATING ClusterState = "TERMINATING"

	// ClusterStateTERMINATED captures enum value "TERMINATED"
	ClusterStateTERMINATED ClusterState = "TERMINATED"

	// ClusterStateERROR captures enum value "ERROR"
	ClusterStateERROR ClusterState = "ERROR"

	// ClusterStateUNKNOWN captures enum value "UNKNOWN"
	ClusterStateUNKNOWN ClusterState = "UNKNOWN"
)

// for schema
var clusterStateEnum []interface{}

func init() {
	var res []ClusterState
	if err := json.Unmarshal([]byte(`["PENDING","RUNNING","RESTARTING","RESIZING","TERMINATING","TERMINATED","ERROR","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterStateEnum = append(clusterStateEnum, v)
	}
}

func (m ClusterState) validateClusterStateEnum(path, location string, value ClusterState) error {
	if err := validate.Enum(path, location, value, clusterStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster state
func (m ClusterState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
