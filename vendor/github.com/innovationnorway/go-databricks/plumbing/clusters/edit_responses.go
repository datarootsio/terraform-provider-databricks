// Code generated by go-swagger; DO NOT EDIT.

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/innovationnorway/go-databricks/models"
)

// EditReader is a Reader for the Edit structure.
type EditReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EditReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEditOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewEditOK creates a EditOK with default headers values
func NewEditOK() *EditOK {
	return &EditOK{}
}

/*EditOK handles this case with default header values.

OK
*/
type EditOK struct {
}

func (o *EditOK) Error() string {
	return fmt.Sprintf("[POST /clusters/edit][%d] editOK ", 200)
}

func (o *EditOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*EditBody edit body
swagger:model EditBody
*/
type EditBody struct {

	// autoscale
	Autoscale *models.AutoScale `json:"autoscale,omitempty"`

	// autotermination minutes
	AutoterminationMinutes int32 `json:"autotermination_minutes,omitempty"`

	// aws attributes
	AwsAttributes *models.AwsAttributes `json:"aws_attributes,omitempty"`

	// cluster id
	ClusterID string `json:"cluster_id,omitempty"`

	// cluster log conf
	ClusterLogConf *models.ClusterLogConf `json:"cluster_log_conf,omitempty"`

	// cluster name
	ClusterName string `json:"cluster_name,omitempty"`

	// custom tags
	CustomTags models.ClusterTag `json:"custom_tags,omitempty"`

	// docker image
	DockerImage *models.DockerImage `json:"docker_image,omitempty"`

	// driver node type id
	DriverNodeTypeID string `json:"driver_node_type_id,omitempty"`

	// enable elastic disk
	EnableElasticDisk bool `json:"enable_elastic_disk,omitempty"`

	// init scripts
	InitScripts []*models.InitScriptInfo `json:"init_scripts"`

	// instance pool id
	InstancePoolID string `json:"instance_pool_id,omitempty"`

	// node type id
	NodeTypeID string `json:"node_type_id,omitempty"`

	// num workers
	NumWorkers int32 `json:"num_workers,omitempty"`

	// spark conf
	SparkConf models.SparkConfPair `json:"spark_conf,omitempty"`

	// spark env vars
	SparkEnvVars models.SparkEnvPair `json:"spark_env_vars,omitempty"`

	// spark version
	SparkVersion string `json:"spark_version,omitempty"`

	// ssh public keys
	SSHPublicKeys []string `json:"ssh_public_keys"`
}

// Validate validates this edit body
func (o *EditBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAutoscale(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAwsAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClusterLogConf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomTags(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDockerImage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInitScripts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSparkConf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSparkEnvVars(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EditBody) validateAutoscale(formats strfmt.Registry) error {

	if swag.IsZero(o.Autoscale) { // not required
		return nil
	}

	if o.Autoscale != nil {
		if err := o.Autoscale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "autoscale")
			}
			return err
		}
	}

	return nil
}

func (o *EditBody) validateAwsAttributes(formats strfmt.Registry) error {

	if swag.IsZero(o.AwsAttributes) { // not required
		return nil
	}

	if o.AwsAttributes != nil {
		if err := o.AwsAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "aws_attributes")
			}
			return err
		}
	}

	return nil
}

func (o *EditBody) validateClusterLogConf(formats strfmt.Registry) error {

	if swag.IsZero(o.ClusterLogConf) { // not required
		return nil
	}

	if o.ClusterLogConf != nil {
		if err := o.ClusterLogConf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster_log_conf")
			}
			return err
		}
	}

	return nil
}

func (o *EditBody) validateCustomTags(formats strfmt.Registry) error {

	if swag.IsZero(o.CustomTags) { // not required
		return nil
	}

	if err := o.CustomTags.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "custom_tags")
		}
		return err
	}

	return nil
}

func (o *EditBody) validateDockerImage(formats strfmt.Registry) error {

	if swag.IsZero(o.DockerImage) { // not required
		return nil
	}

	if o.DockerImage != nil {
		if err := o.DockerImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "docker_image")
			}
			return err
		}
	}

	return nil
}

func (o *EditBody) validateInitScripts(formats strfmt.Registry) error {

	if swag.IsZero(o.InitScripts) { // not required
		return nil
	}

	for i := 0; i < len(o.InitScripts); i++ {
		if swag.IsZero(o.InitScripts[i]) { // not required
			continue
		}

		if o.InitScripts[i] != nil {
			if err := o.InitScripts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "init_scripts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *EditBody) validateSparkConf(formats strfmt.Registry) error {

	if swag.IsZero(o.SparkConf) { // not required
		return nil
	}

	if err := o.SparkConf.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "spark_conf")
		}
		return err
	}

	return nil
}

func (o *EditBody) validateSparkEnvVars(formats strfmt.Registry) error {

	if swag.IsZero(o.SparkEnvVars) { // not required
		return nil
	}

	if err := o.SparkEnvVars.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "spark_env_vars")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EditBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EditBody) UnmarshalBinary(b []byte) error {
	var res EditBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
