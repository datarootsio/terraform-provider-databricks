// Code generated by go-swagger; DO NOT EDIT.

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// PermanentDeleteReader is a Reader for the PermanentDelete structure.
type PermanentDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PermanentDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPermanentDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPermanentDeleteOK creates a PermanentDeleteOK with default headers values
func NewPermanentDeleteOK() *PermanentDeleteOK {
	return &PermanentDeleteOK{}
}

/*PermanentDeleteOK handles this case with default header values.

Deleted
*/
type PermanentDeleteOK struct {
}

func (o *PermanentDeleteOK) Error() string {
	return fmt.Sprintf("[POST /clusters/permanent-delete][%d] permanentDeleteOK ", 200)
}

func (o *PermanentDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PermanentDeleteBody permanent delete body
swagger:model PermanentDeleteBody
*/
type PermanentDeleteBody struct {

	// cluster id
	ClusterID string `json:"cluster_id,omitempty"`
}

// Validate validates this permanent delete body
func (o *PermanentDeleteBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PermanentDeleteBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PermanentDeleteBody) UnmarshalBinary(b []byte) error {
	var res PermanentDeleteBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
